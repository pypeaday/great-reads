"""add_genre_publication_date_page_count_to_books

Revision ID: aa0b51faa7a4
Revises: bbcee0f30657
Create Date: 2025-04-04 07:53:46.223548

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'aa0b51faa7a4'
down_revision: str | None = 'bbcee0f30657'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check existing columns
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [column['name'] for column in inspector.get_columns('books')]
    
    # Add columns to books table only if they don't exist
    if 'genre' not in columns:
        op.add_column('books', sa.Column('genre', sa.String(length=100), nullable=True))
    if 'publication_date' not in columns:
        op.add_column(
            'books',
            sa.Column('publication_date', sa.String(length=20), nullable=True)
        )
    if 'page_count' not in columns:
        op.add_column('books', sa.Column('page_count', sa.Integer(), nullable=True))

    # Add genres as JSON column if it doesn't exist
    if 'genres' not in columns:
        op.add_column('books', sa.Column('genres', sa.JSON(), nullable=True))
    
    # For SQLite compatibility, we'll skip the ALTER COLUMN operations
    # and handle index changes carefully
    
    # Check if indexes exist before creating them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    indexes = inspector.get_indexes('users')
    index_names = [index['name'] for index in indexes]
    
    # Create new indexes only if they don't exist
    if 'ix_users_email' not in index_names:
        op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    
    # Try to create unique constraint on verification_token if it doesn't exist
    try:
        constraints = [constraint['name']
                      for constraint in inspector.get_unique_constraints('users')]
        if 'uq_users_verification_token' not in constraints:
            op.create_unique_constraint(
                'uq_users_verification_token',
                'users',
                ['verification_token']
            )
    except Exception:
        # If it fails, we'll skip it
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the columns we added
    op.drop_column('books', 'genres')
    op.drop_column('books', 'page_count')
    op.drop_column('books', 'publication_date')
    op.drop_column('books', 'genre')
    
    # Drop indexes and constraints
    try:
        op.drop_constraint(None, 'users', type_='unique')
    except Exception:
        pass
        
    op.drop_index(op.f('ix_users_email'), table_name='users')
    
    # Recreate old indexes
    try:
        op.create_index('ix_users_email', 'users', ['email'], unique=False)
        op.create_index('ix_users_verification_token', 'users', ['verification_token'], unique=1)
    except Exception:
        pass
    # ### end Alembic commands ###
